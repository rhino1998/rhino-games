// Code generated by "enumer -type=Value -trimprefix V"; DO NOT EDIT.

//
package liarspoker

import (
	"fmt"
)

const _ValueName = "WILDZEROONETWOTHREEFOURFIVESIXSEVENEIGHTNINETENELEVENJACKQUEENKINGACE"

var _ValueIndex = [...]uint8{0, 4, 8, 11, 14, 19, 23, 27, 30, 35, 40, 44, 47, 53, 57, 62, 66, 69}

func (i Value) String() string {
	if i < 0 || i >= Value(len(_ValueIndex)-1) {
		return fmt.Sprintf("Value(%d)", i)
	}
	return _ValueName[_ValueIndex[i]:_ValueIndex[i+1]]
}

var _ValueValues = []Value{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}

var _ValueNameToValueMap = map[string]Value{
	_ValueName[0:4]:   0,
	_ValueName[4:8]:   1,
	_ValueName[8:11]:  2,
	_ValueName[11:14]: 3,
	_ValueName[14:19]: 4,
	_ValueName[19:23]: 5,
	_ValueName[23:27]: 6,
	_ValueName[27:30]: 7,
	_ValueName[30:35]: 8,
	_ValueName[35:40]: 9,
	_ValueName[40:44]: 10,
	_ValueName[44:47]: 11,
	_ValueName[47:53]: 12,
	_ValueName[53:57]: 13,
	_ValueName[57:62]: 14,
	_ValueName[62:66]: 15,
	_ValueName[66:69]: 16,
}

// ValueString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ValueString(s string) (Value, error) {
	if val, ok := _ValueNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Value values", s)
}

// ValueValues returns all values of the enum
func ValueValues() []Value {
	return _ValueValues
}

// IsAValue returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Value) IsAValue() bool {
	for _, v := range _ValueValues {
		if i == v {
			return true
		}
	}
	return false
}
