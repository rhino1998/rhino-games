// Code generated by "enumer -type=HandKind"; DO NOT EDIT.

//
package liarspoker

import (
	"fmt"
)

const _HandKindName = "UNSPECIFIEDHIGHPAIRTWOPAIRTHREEOFAKINDSTRAIGHTFULLHOUSEFOUROFAKINDSTRAIGHTFLUSHFIVEOFAKINDSIXOFAKINDSEVENOFAKINDEIGHTOFAKIND"

var _HandKindIndex = [...]uint8{0, 11, 15, 19, 26, 38, 46, 55, 66, 79, 90, 100, 112, 124}

func (i HandKind) String() string {
	if i < 0 || i >= HandKind(len(_HandKindIndex)-1) {
		return fmt.Sprintf("HandKind(%d)", i)
	}
	return _HandKindName[_HandKindIndex[i]:_HandKindIndex[i+1]]
}

var _HandKindValues = []HandKind{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}

var _HandKindNameToValueMap = map[string]HandKind{
	_HandKindName[0:11]:    0,
	_HandKindName[11:15]:   1,
	_HandKindName[15:19]:   2,
	_HandKindName[19:26]:   3,
	_HandKindName[26:38]:   4,
	_HandKindName[38:46]:   5,
	_HandKindName[46:55]:   6,
	_HandKindName[55:66]:   7,
	_HandKindName[66:79]:   8,
	_HandKindName[79:90]:   9,
	_HandKindName[90:100]:  10,
	_HandKindName[100:112]: 11,
	_HandKindName[112:124]: 12,
}

// HandKindString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func HandKindString(s string) (HandKind, error) {
	if val, ok := _HandKindNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to HandKind values", s)
}

// HandKindValues returns all values of the enum
func HandKindValues() []HandKind {
	return _HandKindValues
}

// IsAHandKind returns "true" if the value is listed in the enum definition. "false" otherwise
func (i HandKind) IsAHandKind() bool {
	for _, v := range _HandKindValues {
		if i == v {
			return true
		}
	}
	return false
}
