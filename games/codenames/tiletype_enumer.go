// Code generated by "enumer -type=TileType"; DO NOT EDIT.

//
package codenames

import (
	"fmt"
)

const _TileTypeName = "UNKNOWNNEUTRALDEATHREDBLUE"

var _TileTypeIndex = [...]uint8{0, 7, 14, 19, 22, 26}

func (i TileType) String() string {
	if i >= TileType(len(_TileTypeIndex)-1) {
		return fmt.Sprintf("TileType(%d)", i)
	}
	return _TileTypeName[_TileTypeIndex[i]:_TileTypeIndex[i+1]]
}

var _TileTypeValues = []TileType{0, 1, 2, 3, 4}

var _TileTypeNameToValueMap = map[string]TileType{
	_TileTypeName[0:7]:   0,
	_TileTypeName[7:14]:  1,
	_TileTypeName[14:19]: 2,
	_TileTypeName[19:22]: 3,
	_TileTypeName[22:26]: 4,
}

// TileTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TileTypeString(s string) (TileType, error) {
	if val, ok := _TileTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to TileType values", s)
}

// TileTypeValues returns all values of the enum
func TileTypeValues() []TileType {
	return _TileTypeValues
}

// IsATileType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i TileType) IsATileType() bool {
	for _, v := range _TileTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
