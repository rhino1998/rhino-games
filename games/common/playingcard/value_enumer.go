// Code generated by "enumer -type=Value -trimprefix V"; DO NOT EDIT.

//
package playingcard

import (
	"fmt"
)

const _ValueName = "WILDACETWOTHREEFOURFIVESIXSEVENEIGHTNINETENJACKQUEENKING"

var _ValueIndex = [...]uint8{0, 4, 7, 10, 15, 19, 23, 26, 31, 36, 40, 43, 47, 52, 56}

func (i Value) String() string {
	if i >= Value(len(_ValueIndex)-1) {
		return fmt.Sprintf("Value(%d)", i)
	}
	return _ValueName[_ValueIndex[i]:_ValueIndex[i+1]]
}

var _ValueValues = []Value{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}

var _ValueNameToValueMap = map[string]Value{
	_ValueName[0:4]:   0,
	_ValueName[4:7]:   1,
	_ValueName[7:10]:  2,
	_ValueName[10:15]: 3,
	_ValueName[15:19]: 4,
	_ValueName[19:23]: 5,
	_ValueName[23:26]: 6,
	_ValueName[26:31]: 7,
	_ValueName[31:36]: 8,
	_ValueName[36:40]: 9,
	_ValueName[40:43]: 10,
	_ValueName[43:47]: 11,
	_ValueName[47:52]: 12,
	_ValueName[52:56]: 13,
}

// ValueString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ValueString(s string) (Value, error) {
	if val, ok := _ValueNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Value values", s)
}

// ValueValues returns all values of the enum
func ValueValues() []Value {
	return _ValueValues
}

// IsAValue returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Value) IsAValue() bool {
	for _, v := range _ValueValues {
		if i == v {
			return true
		}
	}
	return false
}
